# Autogenerated wrapper script for P4est_jll for aarch64-linux-musl
export libsc, libp4est

using Zlib_jll
## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libsc`
const libsc_splitpath = ["lib", "libsc.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libsc_path = ""

# libsc-specific global declaration
# This will be filled out by __init__()
libsc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libsc = "libsc-2.2.so"


# Relative path to `libp4est`
const libp4est_splitpath = ["lib", "libp4est.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libp4est_path = ""

# libp4est-specific global declaration
# This will be filled out by __init__()
libp4est_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libp4est = "libp4est-2.2.so"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"P4est")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    # We first need to add to LIBPATH_list the libraries provided by Julia
    append!(LIBPATH_list, [joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)])
    # From the list of our dependencies, generate a tuple of all the PATH and LIBPATH lists,
    # then append them to our own.
    foreach(p -> append!(PATH_list, p), (Zlib_jll.PATH_list,))
    foreach(p -> append!(LIBPATH_list, p), (Zlib_jll.LIBPATH_list,))

    global libsc_path = normpath(joinpath(artifact_dir, libsc_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libsc_handle = dlopen(libsc_path)
    push!(LIBPATH_list, dirname(libsc_path))

    global libp4est_path = normpath(joinpath(artifact_dir, libp4est_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libp4est_handle = dlopen(libp4est_path)
    push!(LIBPATH_list, dirname(libp4est_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

